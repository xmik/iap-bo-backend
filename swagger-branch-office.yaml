swagger: "2.0"
info:
  description: "This is a Branch Office Backend server. The database is on port: 5433"
  version: "0.1.0"
  title: "Branch Office Server"
host: "localhost:8080"
basePath: "/api"
tags:
- name: "employees"
  description: "Concerns Employee objects"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/xmik/iap-bo-backend"
- name: "employee_hours"
  description: "Concerns EmployeeHours objects"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/xmik/iap-bo-backend"
- name: "salaries"
  description: "Concerns Salary objects"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/xmik/iap-bo-backend"
- name: "user"
  description: "Concerns User objects"
  externalDocs:
    description: "Find out more"
    url: "https://github.com/xmik/iap-bo-backend"
schemes:
- "https"
- "http"
paths:
  /api/synchronize:
    post:
      tags:
      - "synchronization"
      summary: "Invokes a synchronization with a HQ server and waits for it to be finished"
      description: "Invokes a synchronization with a HQ server and waits for it to be finished"
      operationId: "postSynchronize"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
  /api/employees/list:
    get:
      tags:
      - "employees"
      summary: "Gets a collection of Employees objects"
      description: "Gets a collection of Employees objects"
      operationId: "getEmployees"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Employee"
  /api/employees/{employeeId}:
    get:
      tags:
      - "employees"
      summary: "Gets one Employees object"
      description: "Gets one Employees object"
      operationId: "getEmployee"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "ID of Employee to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Employee"
        404:
          description: "Employee not found"
  /api/employee_hours/list:
    get:
      tags:
      - "employee_hours"
      summary: "Gets a collection of EmployeeHours objects for an Employee"
      description: "Gets a collection of EmployeeHours objects for an Employee"
      operationId: "findEmployeeHoursCollectionByEmployee"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "Employee ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EmployeeHours"
        404:
          description: "Employee not found"
  /api/employee_hours:
    post:
      tags:
      - "employee_hours"
      summary: "Adds a new EmployeeHours object"
      description: "Adds a new EmployeeHours object. Can be performed only by manager or user with the specified EmployeeId."
      operationId: "addEmployeeHours"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "Employee ID"
        required: true
        type: "integer"
        format: "int64"
      - name: "hoursCount"
        in: "path"
        description: "Number of hours worked"
        required: true
        type: "number"
        format: "float"
      - name: "timePeriod"
        in: "path"
        description: "Date time range"
        required: true
        type: "string"
        format: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "Unauthorized"
        404:
          description: "Employee not found"
      security:
        - branch_office_auth: []
  /api/employee_hours/{employeeHoursId}:
    get:
      tags:
      - "employee_hours"
      summary: "Gets an existing EmployeeHours object"
      description: "Gets an existing EmployeeHours object"
      operationId: "getEmployeeHours"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "employeeHoursId"
        in: "path"
        description: "EmployeeHours ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EmployeeHours"
        401:
          description: "Unauthorized"
        404:
          description: "EmployeeHours not found"
      security:
        - branch_office_auth: []
    delete:
      tags:
      - "employee_hours"
      summary: "Deletes an EmployeeHours object"
      description: ""
      operationId: "deleteEmployeeHours"
      produces:
      - "application/json"
      parameters:
      - name: "employeeHoursId"
        in: "path"
        description: "EmployeeHours ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        401:
          description: "Unauthorized"
        404:
          description: "EmployeeHours not found"
      security:
        - branch_office_auth: []
    put:
      tags:
      - "employee_hours"
      summary: "Updates an existing EmployeeHours object"
      description: "Updates an existing EmployeeHours object"
      operationId: "updateEmployeeHours"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "employeeHoursId"
        in: "path"
        description: "EmployeeHours ID"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "EmployeeHours object"
        required: true
        schema:
          $ref: "#/definitions/EmployeeHours"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        401:
          description: "Unauthorized"
        404:
          description: "EmployeeHours not found"
      security:
        - branch_office_auth: []
  /api/salaries/list:
    get:
      tags:
      - "salaries"
      summary: "Gets a collection of Salary objects for an Employee"
      description: "Gets a collection of Salary objects for an Employee"
      operationId: "findSalaryCollectionByEmployee"
      produces:
      - "application/json"
      parameters:
      - name: "employeeId"
        in: "path"
        description: "Employee ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Salary"
        401:
          description: "Unauthorized"
        404:
          description: "Employee not found"
      security:
        - branch_office_auth: []
  /api/user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /api/user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
        401:
          description: "Unauthorized"
      security:
        - branch_office_auth: []
  /api/user/{username}:
    post:
      tags:
      - "user"
      summary: "Creates a new user"
      description: "Creates a new user"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "username"
        description: "Username must be an employee Email"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserCreatedResponse"
        404:
          description: "Employee with a particular email not found"
        409:
          description: "User already with a particular login already exists"
    put:
      tags:
      - "user"
      summary: "Updates user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "query"
        name: "password"
        description: "Updated user object"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserCreatedResponse"
        400:
          description: "Invalid username or password supplied"
        401:
          description: "Unauthorized"
        404:
          description: "User not found"
      security:
        - branch_office_auth: []
    delete:
      tags:
      - "user"
      summary: "Deletes user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The username of a user to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        401:
          description: "Unauthorized"
        404:
          description: "User not found"
      security:
        - branch_office_auth: []
securityDefinitions:
  branch_office_auth:
    type: "basic"
definitions:
  Employee:
    type: "object"
    properties:
      Id:
        type: "integer"
        format: "int64"
        default: 1
      Name:
        type: "string"
        example: "Jan Kowalski"
      Email:
        type: "string"
        example: "kowalski@gmail.com"
      IsManager:
        type: "boolean"
        default: false
  EmployeeHours:
    type: "object"
    properties:
      Id:
        type: "integer"
        format: "int64"
        default: 1
      Value:
        type: "number"
        format: "float"
        default: 8
      TimePeriod:
        type: "string"
        format: "string"
        default: "12.04.2019-12.04.2019"
      EmployeeId:
        type: "integer"
        format: "int64"
        default: 1
  Salary:
    type: "object"
    properties:
      Id:
        type: "integer"
        format: "int64"
        default: 1
      Value:
        type: "number"
        format: "float"
        default: 1000
      TimePeriod:
        type: "string"
        format: "string"
        default: "12.04.2019-19.04.2019"
      EmployeeId:
        type: "integer"
        format: "int64"
        default: 1
  UserCreatedResponse:
    type: "object"
    properties:
      Type:
        type: "string"
      Message:
        type: "string"
      Password:
        type: "string"
  ApiResponse:
    type: "object"
    properties:
      Code:
        type: "integer"
        format: "int64"
      Type:
        type: "string"
      Message:
        type: "string"
externalDocs:
  description: "Find out more about the project"
  url: "https://github.com/xmik/iap-bo-backend"
